{"ast":null,"code":"// AuthContext.js\nimport React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setAuthenticated]=useState(()=>{// Initialize the authentication state from localStorage or other storage mechanism\nreturn localStorage.getItem('isAuthenticated')==='true';});const login=()=>{setAuthenticated(true);localStorage.setItem('isAuthenticated','true');};const logout=()=>{setAuthenticated(false);localStorage.removeItem('isAuthenticated');};// Use useEffect to check the authentication state on component mount\nuseEffect(()=>{const storedAuthState=localStorage.getItem('isAuthenticated');if(storedAuthState!==null){setAuthenticated(storedAuthState==='true');}},[]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated,login,logout},children:children});};export const useAuth=()=>{return useContext(AuthContext);};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","isAuthenticated","setAuthenticated","localStorage","getItem","login","setItem","logout","removeItem","storedAuthState","Provider","value","useAuth"],"sources":["/home/sudip/DocStorage/src/Components/Authentication/AuthContext.js"],"sourcesContent":["// AuthContext.js\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setAuthenticated] = useState(() => {\n    // Initialize the authentication state from localStorage or other storage mechanism\n    return localStorage.getItem('isAuthenticated') === 'true';\n  });\n\n  const login = () => {\n    setAuthenticated(true);\n    localStorage.setItem('isAuthenticated', 'true');\n  };\n\n  const logout = () => {\n    setAuthenticated(false);\n    localStorage.removeItem('isAuthenticated');\n  };\n\n  // Use useEffect to check the authentication state on component mount\n  useEffect(() => {\n    const storedAuthState = localStorage.getItem('isAuthenticated');\n    if (storedAuthState !== null) {\n      setAuthenticated(storedAuthState === 'true');\n    }\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,eAAe,CAAEC,gBAAgB,CAAC,CAAGT,QAAQ,CAAC,IAAM,CACzD;AACA,MAAO,CAAAU,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,GAAK,MAAM,CAC3D,CAAC,CAAC,CAEF,KAAM,CAAAC,KAAK,CAAGA,CAAA,GAAM,CAClBH,gBAAgB,CAAC,IAAI,CAAC,CACtBC,YAAY,CAACG,OAAO,CAAC,iBAAiB,CAAE,MAAM,CAAC,CACjD,CAAC,CAED,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnBL,gBAAgB,CAAC,KAAK,CAAC,CACvBC,YAAY,CAACK,UAAU,CAAC,iBAAiB,CAAC,CAC5C,CAAC,CAED;AACAd,SAAS,CAAC,IAAM,CACd,KAAM,CAAAe,eAAe,CAAGN,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAC/D,GAAIK,eAAe,GAAK,IAAI,CAAE,CAC5BP,gBAAgB,CAACO,eAAe,GAAK,MAAM,CAAC,CAC9C,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEb,IAAA,CAACC,WAAW,CAACa,QAAQ,EAACC,KAAK,CAAE,CAAEV,eAAe,CAAEI,KAAK,CAAEE,MAAO,CAAE,CAAAP,QAAA,CAC7DA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAY,OAAO,CAAGA,CAAA,GAAM,CAC3B,MAAO,CAAApB,UAAU,CAACK,WAAW,CAAC,CAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}